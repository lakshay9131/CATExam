
The Architecture and Working


Go to Doc : https://docs.google.com/document/d/1ux7_NTAnfYEpJhIE3dMyn-29DuY46TVGYBiwVh2gT-4/edit?tab=t.0
Schema Tables

Exam        
 (ExamId, Slots, name,   applicants , start & ExpiryDate)

Questions a
( questionId, name, description , subject, examId,questionScore(for      analytics),correctAnswer,
 options)

Attempt (attemptId,studentid,examid,answers,scorepercentile)
Student ...student details



Working Q and A



Problem 1: 1 lakh + students can take the exam at the same time /day.
Solution: 
We have asked to submit answers in group of 5 questions in single time using /submitanswers,
Eventually it will be scored and saved on backend in Attempt answers as json;

 1lakh concurrent request will be reduced to :
         
 best case (1 lakh/ time to solve 5 questions)  i.e 1 lakh / 120s = 2000 to 3000 concurrent request approx
	 
 worst case (1 lakh / time for retry or wait for response ) i.e 1 lakh / 20 s = 5000 to 6000 concurrent request approx.
          
Therefore we can use  :
		
1) Server less (lambda or functions ) : which has ability to auto scale and reduce  (eg Azure Ep1 serverless functions  100 to 130 $ per instance)
		
2) EC2 or any similar cloud :  similar auto scalability configuration (eg Amazon    100 to 150 $ per instance)

Database I have preferred for Mongo as its good for high traffic ,and indexes on id and necessary fields

Pro's : Highly Scalable as per need not needed every time, saves cost and reduces complexity
Cons's : Cant find any right now

Check in the project src/models and image


Problem 2: Publishing results:


Solution : 
Created Functions which can be triggered with admin Api's or cron job as soon as Exam is expired (parameter of Exam table).

1) Function will  start calculating total score as soon as the applicant  test is    completed.We also calculate section/subject wise scores as per need.
 2) Percentile can be calculated slot wise or after Exam concluded for all, depends on need ,and it's decided based on the above score of the applicant.
We also calculate percentile for subject wise using the same method.

We can get the result /leaderboard api*
		

Pros: Cpu Heavy Task , Can be done Asyn after test, has no major affect on system. 
      Flexible with needs

Cons: Cant find more 


Check in the project src/services  and image






Problem 3: Future Ranking and prediction
Solution:	
We can use the following 
		
Best Way : YoY Analytics of data and use Data Analytics & ML  based on score in Subjects and some user history (12 th score, graduation scores , traits).
               
 Easy  Way : Use Predictability in Range of +- 10 percent Range

                
Mid Way: Ask to take few more quiz 30 min for each section (increase level and see how he performs), and give him his painpoint feedback and result based on test . 


Not Done only Ideaology Can build Easy and Mid 




		




		


